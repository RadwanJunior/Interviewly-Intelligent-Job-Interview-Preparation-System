{
  "nodes": [
    {
      "parameters": {
        "channels": "interviewly:request-rag",
        "options": {}
      },
      "name": "Redis Trigger1",
      "type": "n8n-nodes-base.redisTrigger",
      "typeVersion": 1,
      "position": [-832, 544],
      "id": "ffdefd01-cff3-4a2d-9400-91f56aa79a9c",
      "credentials": {
        "redis": {
          "id": "bWGrVbuj0Hi8Mhlb",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse the input data from Redis\nconst data = JSON.parse($input.item.json.message || '{}');\n\nconsole.log('Received request:', data);\n\nreturn {\n  json: data\n};"
      },
      "name": "Parse Request1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [-672, 544],
      "id": "408f694d-33e0-4b54-b983-239e06631cfb"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1/models/embedding-001:embedContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"embedding-001\",\n  \"content\": {\n    \"parts\": [\n      {\n        \"text\": \"Company: {{$json.company}}\\n\\nPosition: {{$json.job_title}}\\n\\nResume: {{$json.resume}}\\n\\nJob Description: {{$json.job_description}}\"\n      }\n    ]\n  }\n}",
        "options": {}
      },
      "name": "Generate Gemini Embedding1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-528, 544],
      "id": "5bce77d0-fc3e-47bd-9cd5-64a5d7fbc964",
      "credentials": {
        "googlePalmApi": {
          "id": "JflTtghJYyMdjigf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const embeddingResponse = $input.item.json.embedding;\n\n// Extract just the values array from the embedding object\nconst embedding = embeddingResponse && embeddingResponse.values \n  ? embeddingResponse.values   // If it has a 'values' property, use that\n  : embeddingResponse;         // Otherwise use as is\n\nreturn {\n  json: {\n    ...$json,\n    embedding\n  }\n};"
      },
      "name": "Extract Embedding1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [-384, 544],
      "id": "d9c4fecb-6e26-45f4-941f-efaf9318fd53"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://jdtuplcyczhtpljofwjg.supabase.co/rest/v1/rpc/match_context",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query_embedding",
              "value": "={{ $json.embedding }}"
            },
            {
              "name": "similarity_threshold",
              "value": 0.7
            },
            {
              "name": "match_count",
              "value": 15
            },
            {
              "name": "p_company",
              "value": "={{ $json.company }}"
            },
            {
              "name": "p_job_title",
              "value": "={{ $json.job_title }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "include": {
                "all": true
              },
              "neverError": true
            }
          }
        }
      },
      "name": "Search Vector DB1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-224, 544],
      "id": "8f3e3d8d-9440-4fa8-a929-3d03acabd289",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "zRDKpsdTHaXcFpaq",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// The DB results are now in the 'body' property because of the merge.\nconst results = $input.item.body || [];\nconst hasResults = results.length > 0;\nconst hasQualityResults = hasResults && results.some(r => r.similarity > 0.8);\n\nconst resultsByType = {};\nif (hasResults) {\n  results.forEach(item => {\n    const docType = item.doc_type || 'other';\n    if (!resultsByType[docType]) {\n      resultsByType[docType] = [];\n    }\n    resultsByType[docType].push(item);\n  });\n}\n\n// Now, we correctly merge the original data with the new evaluation.\nreturn {\n  json: {\n    ...$input.item.json, // Pass through all original data\n    searchResults: results,\n    resultsByType,\n    hasQualityResults\n  }\n};"
      },
      "name": "Evaluate Results1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [-80, 544],
      "id": "bce72dbe-db6e-4eac-9e77-759830652590"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "{{ $json.hasQualityResults }}"
            }
          ]
        }
      },
      "name": "Branch Based on Results1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [80, 544],
      "id": "bfc3043f-533b-4a43-b3cc-8f056d9c6324"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "serpApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google"
            },
            {
              "name": "q",
              "value": "={{ $json.company && $json.job_title ? \n        `${$json.company} interview questions for ${$json.job_title}` : \n        'interview questions' }}"
            },
            {
              "name": "num",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "name": "Search SerpAPI1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [432, 432],
      "id": "2170a7f0-31d5-49ca-8c35-7858a405e31a",
      "credentials": {
        "serpApi": {
          "id": "QGLoRswavOexgrGL",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.item.json;\nconst results = incomingData.organic_results || [];\nconst webResults = results.filter(r => !r.link.includes('youtube.com'));\nconst urls = webResults.length > 0 ? webResults.map(r => r.link) : results.map(r => r.link);\n\nconsole.log(`Found ${urls.length} URLs to process`);\nurls.forEach((url, i) => console.log(`URL ${i+1}: ${url}`));\n\nconst batchId = Date.now().toString();\n\n// CRITICAL FIX: Merge original data with the new URL data\nreturn {\n  json: {\n    ...incomingData, // Pass through all original data\n    urls: [...new Set(urls)].slice(0, 5),\n    urlCount: Math.min([...new Set(urls)].slice(0, 5).length, 5),\n    batchId\n  }\n};"
      },
      "name": "Extract URLs1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [576, 432],
      "id": "81425184-6fd4-4fdf-aabd-449571ba4e3b"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false,
          "includeBatchIndex": true
        }
      },
      "name": "Split URLs1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [736, 432],
      "id": "333d3c14-e3c5-4bb3-97ea-5a34704d1a45"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({ \n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": `URL: ${$json.urls[0]}\\n\\nPlease analyze this page about ${$json.job_title} positions at ${$json.company} or similar companies.\\n\\nExtract the following information:\\n1. Interview questions specific to this role\\n2. Company culture insights\\n3. Required skills and qualifications\\n4. Interview process details\\n5. Tips from past interviewees\\n\\nFormat your response as a JSON array of objects with these properties:\\n- content: The extracted text\\n- doc_type: One of [\"interview_questions\", \"company_info\", \"role_requirements\", \"interview_process\", \"candidate_advice\"]\\n\\nOnly return valid JSON.`\n        }\n      ]\n    }\n  ],\n  \"model\": \"gemini-2.5-pro\",\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a helpful assistant that extracts structured information from web content. Format your response as valid JSON following the schema exactly as requested.\"\n      }\n    ]\n  },\n  \"generation_config\": {\n    \"temperature\": 0.1,\n    \"top_p\": 0.8,\n    \"top_k\": 40,\n    \"response_mime_type\": \"application/json\"\n  }\n}) }}",
        "options": {}
      },
      "name": "Extract Content With Gemini1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [896, 432],
      "id": "e81830f7-2169-4570-a70e-d95995b5aa5f",
      "credentials": {
        "googlePalmApi": {
          "id": "JflTtghJYyMdjigf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let extractedContent = [];\n// The URL for the current batch is the first (and only) item in the urls array\nconst currentUrl = $input.item.json.urls[0] || 'unknown URL';\n\ntry {\n  // The response from the Gemini HTTP Request node is in the 'body' property\n  const geminiResponse = $input.item.json.body;\n\n  // Safely access the text part which contains the JSON string\n  const jsonString = geminiResponse?.candidates?.[0]?.content?.parts?.[0]?.text;\n\n  if (jsonString) {\n    // Gemini sometimes wraps the JSON in markdown, so we clean it up.\n    const cleanedJsonString = jsonString.replace(/^```json\\n/, '').replace(/\\n```$/, '');\n    const parsed = JSON.parse(cleanedJsonString);\n\n    // Ensure we have an array, as requested in the prompt\n    if (Array.isArray(parsed)) {\n      extractedContent = parsed;\n    }\n  } else {\n    console.log(\"Warning: Could not find JSON content in Gemini response.\");\n  }\n} catch (error) {\n  console.log(\"Error parsing Gemini response:\", error.message);\n  // Log the raw text to help with debugging\n  console.log(\"Raw response text:\", $input.item.json.body?.candidates?.[0]?.content?.parts?.[0]?.text);\n}\n\n// Return all the original data, plus the newly extracted content and the specific URL used\nreturn {\n  json: {\n    ...$input.item.json,\n    extractedContent,\n    url: currentUrl // Pass on the specific URL for this batch\n  }\n};"
      },
      "name": "Process Content1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1040, 432],
      "id": "9f9468c3-aa51-4b9b-8f22-5ac3b38a3e4c"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://jdtuplcyczhtpljofwjg.supabase.co/rest/v1/context_documents",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.extractedContent.map(item => ({\n      content: item.content,\n      doc_type: item.doc_type,\n      source_url: $json.url || 'unknown URL',\n      company: $json.company,\n      job_title: $json.job_title,\n      batch_id: $json.batchId\n    })) }}",
        "options": {}
      },
      "name": "Store Content in Supabase1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1184, 432],
      "id": "7b242e08-8274-4006-a4f2-d670e6420a13",
      "credentials": {
        "supabaseApi": {
          "id": "zRDKpsdTHaXcFpaq",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "name": "Wait After Processing1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1552, 432],
      "webhookId": "wait-after-processing",
      "id": "b8644746-4db4-4960-9be1-ee1e83cd6ef6"
    },
    {
      "parameters": {
        "url": "=https://jdtuplcyczhtpljofwjg.supabase.co/rest/v1/context_documents",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "batch_id",
              "value": "={{ $json.batchId }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "name": "Query Processed Content1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1968, 432],
      "id": "e534c7f5-8a70-4252-85e5-eb3e675cd124",
      "credentials": {
        "supabaseApi": {
          "id": "zRDKpsdTHaXcFpaq",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process items from database query\nconst items = $input.item.json;\nlet allContent = [];\n\nif (Array.isArray(items)) {\n  allContent = items;\n}\n\n// Group content by type\nconst contentByType = {};\nallContent.forEach(item => {\n  const docType = item.doc_type || 'other';\n  if (!contentByType[docType]) {\n    contentByType[docType] = [];\n  }\n  contentByType[docType].push(item.content);\n});\n\n// Format sections for the prompt\nconst interviewQuestions = (contentByType['interview_questions'] || []).join('\\n\\n');\nconst companyInfo = (contentByType['company_info'] || []).join('\\n\\n');\nconst roleRequirements = (contentByType['role_requirements'] || []).join('\\n\\n');\nconst interviewProcess = (contentByType['interview_process'] || []).join('\\n\\n');\nconst candidateAdvice = (contentByType['candidate_advice'] || []).join('\\n\\n');\n\n// Create the enhanced prompt with all context sections\nconst basePrompt = `You are an AI interviewer for ${$json.company} interviewing a candidate for the ${$json.job_title} position.\\n\\nCandidate Resume:\\n${$json.resume}\\n\\nJob Description:\\n${$json.job_description}`;\n\n// Add context sections if they exist\nlet enhancedPrompt = basePrompt;\n\nif (companyInfo) {\n  enhancedPrompt += `\\n\\nCompany Information:\\n${companyInfo}`;\n}\n\nif (roleRequirements) {\n  enhancedPrompt += `\\n\\nRole Requirements:\\n${roleRequirements}`;\n}\n\nif (interviewQuestions) {\n  enhancedPrompt += `\\n\\nCommon Interview Questions:\\n${interviewQuestions}`;\n}\n\nif (interviewProcess) {\n  enhancedPrompt += `\\n\\nInterview Process:\\n${interviewProcess}`;\n}\n\nif (candidateAdvice) {\n  enhancedPrompt += `\\n\\nInterview Advice:\\n${candidateAdvice}`;\n}\n\n// Add instructions\nenhancedPrompt += `\\n\\nInstructions:\\n1. Ask challenging but fair questions that assess both technical skills and cultural fit.\\n2. Mix of technical, behavioral, and company-specific questions.\\n3. Ask follow-up questions to dive deeper into candidate responses.\\n4. Be professional but conversational in your interview style.`;\n\nreturn {\n  json: {\n    interview_id: $json.interview_id,\n    enhanced_prompt: enhancedPrompt,\n    contentCount: allContent.length,\n    urls: allContent.map(item => item.source_url).filter(url => url)\n  }\n};"
      },
      "name": "Generate Enhanced Prompt (New Data)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2112, 432],
      "id": "953cac93-379f-4cdb-a531-00fbc1642f7e"
    },
    {
      "parameters": {
        "jsCode": "const contentByType = $json.resultsByType || {};\n\nconst basePrompt = `You are an AI interviewer for ${$json.company} interviewing a candidate for the ${$json.job_title} position.\\n\\nCandidate Resume:\\n${$json.resume}\\n\\nJob Description:\\n${$json.job_description}`;\n\nlet enhancedPrompt = basePrompt;\n\nif (contentByType['company_info']) {\n  const companyInfo = contentByType['company_info'].map(item => item.content).join('\\n\\n');\n  enhancedPrompt += `\\n\\nCompany Information:\\n${companyInfo}`;\n}\n\nif (contentByType['role_requirements']) {\n  const roleRequirements = contentByType['role_requirements'].map(item => item.content).join('\\n\\n');\n  enhancedPrompt += `\\n\\nRole Requirements:\\n${roleRequirements}`;\n}\n\nif (contentByType['interview_questions']) {\n  const interviewQuestions = contentByType['interview_questions'].map(item => item.content).join('\\n\\n');\n  enhancedPrompt += `\\n\\nCommon Interview Questions:\\n${interviewQuestions}`;\n}\n\nif (contentByType['interview_process']) {\n  const interviewProcess = contentByType['interview_process'].map(item => item.content).join('\\n\\n');\n  enhancedPrompt += `\\n\\nInterview Process:\\n${interviewProcess}`;\n}\n\nif (contentByType['candidate_advice']) {\n  const candidateAdvice = contentByType['candidate_advice'].map(item => item.content).join('\\n\\n');\n  enhancedPrompt += `\\n\\nInterview Advice:\\n${candidateAdvice}`;\n}\n\nenhancedPrompt += `\\n\\nInstructions:\\n1. Ask challenging but fair questions that assess both technical skills and cultural fit.\\n2. Mix of technical, behavioral, and company-specific questions.\\n3. Ask follow-up questions to dive deeper into candidate responses.\\n4. Be professional but conversational in your interview style.`;\n\nreturn {\n  json: {\n    interview_id: $json.interview_id,\n    enhanced_prompt: enhancedPrompt\n  }\n};"
      },
      "name": "Generate Enhanced Prompt (Existing)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [432, 640],
      "id": "ae210d47-565b-46cd-abb0-f411137ee714"
    },
    {
      "parameters": {
        "operation": "publish",
        "channel": "interviewly:prompt-ready",
        "messageData": "=={{ JSON.stringify({    interview_id: $json.interview_id,    enhanced_prompt: $json.enhanced_prompt,    source: 'new_data',    urls: $json.urls,    contentCount: $json.contentCount }) }}"
      },
      "name": "Notify Enhanced Prompt (New Data)1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2272, 432],
      "id": "96fcd411-5f85-46c8-a65c-56f7a5e3265a",
      "credentials": {
        "redis": {
          "id": "bWGrVbuj0Hi8Mhlb",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "publish",
        "channel": "interviewly:prompt-ready",
        "messageData": "=={{ JSON.stringify({    interview_id: $json.interview_id,    enhanced_prompt: $json.enhanced_prompt,    source: 'existing_data' }) }}"
      },
      "name": "Notify Enhanced Prompt (Existing)1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [576, 640],
      "id": "94242192-033e-4f22-ba88-965f24b10dac",
      "credentials": {
        "redis": {
          "id": "bWGrVbuj0Hi8Mhlb",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const redisData = $getNodeConnectionInputData(\"Parse Request\");\nconst originalData = redisData[0].json;\n\n// Return the merged data with both original fields and results\nreturn {\n  json: {\n    ...originalData,\n    resultsByType: $json.resultsByType || {},\n    hasQualityResults: $json.hasQualityResults,\n    searchResults: $json.searchResults || []\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [288, 640],
      "id": "621388cb-e6bc-4753-80a7-fa7f5ef22f1a",
      "name": "Get Node Parameter1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2930ab46-17eb-407e-8309-1301fb861bce",
              "leftValue": "={{ $json.isLastBatch }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1712, 432],
      "id": "5b777e72-40e8-42b6-856a-d1a1bfa6f9cb",
      "name": "check last batch1"
    },
    {
      "parameters": {
        "jsCode": "const currentIndex = $json.batchIndex || 0;\nconst totalBatches = $json.urlCount || $json.urls?.length || 1;\nconst isLastBatch = currentIndex >= totalBatches - 1;\n\nconsole.log(`Processed URL ${currentIndex + 1}/${totalBatches}: ${$json.url}`);\nconsole.log(`Company: ${$json.company || 'undefined'}, Job Title: ${$json.job_title || 'undefined'}`);\nconsole.log(`Is Last Batch: ${isLastBatch}, Current Index: ${currentIndex}, Total Batches: ${totalBatches}`);\n\n// Pass ALL original data through\nreturn {\n  json: {\n    ...$json,\n    isLastBatch,\n    currentIndex,\n    totalBatches,\n    processedUrls: ($json.processedUrls || []).concat($json.url || ''),\n    // Explicitly preserve critical values\n    company: $json.company,\n    job_title: $json.job_title,\n    resume: $json.resume,\n    job_description: $json.job_description,\n    interview_id: $json.interview_id,\n    batchId: $json.batchId\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1376, 432],
      "id": "47753b1e-440c-48da-b33e-9ff435569572",
      "name": "track progress1"
    }
  ],
  "connections": {
    "Redis Trigger1": {
      "main": [
        [
          {
            "node": "Parse Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Request1": {
      "main": [
        [
          {
            "node": "Generate Gemini Embedding1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Gemini Embedding1": {
      "main": [
        [
          {
            "node": "Extract Embedding1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Embedding1": {
      "main": [
        [
          {
            "node": "Search Vector DB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Vector DB1": {
      "main": [
        [
          {
            "node": "Evaluate Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Results1": {
      "main": [
        [
          {
            "node": "Branch Based on Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Branch Based on Results1": {
      "main": [
        [
          {
            "node": "Get Node Parameter1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Search SerpAPI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search SerpAPI1": {
      "main": [
        [
          {
            "node": "Extract URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract URLs1": {
      "main": [
        [
          {
            "node": "Split URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split URLs1": {
      "main": [
        [
          {
            "node": "Extract Content With Gemini1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Content With Gemini1": {
      "main": [
        [
          {
            "node": "Process Content1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Content1": {
      "main": [
        [
          {
            "node": "Store Content in Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Content in Supabase1": {
      "main": [
        [
          {
            "node": "track progress1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait After Processing1": {
      "main": [
        [
          {
            "node": "check last batch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Processed Content1": {
      "main": [
        [
          {
            "node": "Generate Enhanced Prompt (New Data)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enhanced Prompt (New Data)1": {
      "main": [
        [
          {
            "node": "Notify Enhanced Prompt (New Data)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enhanced Prompt (Existing)1": {
      "main": [
        [
          {
            "node": "Notify Enhanced Prompt (Existing)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Node Parameter1": {
      "main": [
        [
          {
            "node": "Generate Enhanced Prompt (Existing)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check last batch1": {
      "main": [
        [
          {
            "node": "Query Processed Content1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "track progress1": {
      "main": [
        [
          {
            "node": "Wait After Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Redis Trigger1": [
      {
        "channel": "interviewly:request-rag",
        "message": "{\"interview_id\": \"test-123\", \"resume\": \"Full Stack Developer with 5 years of experience in React, Node.js, and cloud technologies.\", \"job_description\": \"Looking for a Senior Full Stack Developer with strong React and Node.js skills.\", \"company\": \"Tech Innovations Inc\", \"job_title\": \"Senior Full Stack Developer\"}"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b4e6356340a5ffed9d47f619ec5d0af6291b4db54be51654b52515a0fce37134"
  }
}
